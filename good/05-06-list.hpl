fun (Int () -> List ((Int () -> Int ()))) make_list (x) =
    if x () == 0 
        then EmptyListC ()
        else ListC ({ x -> x () * x () }, make_list (x () - 1));

fun (Int () -> List (Int ())) make_list_2 (x) =
    if x () == 0
        then EmptyListC ()
        else ListC (x (), make_list_2 (x () - 1));

fun (List ((Int () -> Int ())) -> (List (Int ()) -> List (Int ()))) list_apply (EmptyListC (), EmptyListC ()) = EmptyListC ();
fun (List ((Int () -> Int ())) -> (List (Int ()) -> List (Int ()))) list_apply (ListC (f, l1), ListC (i, l2)) =
    ListC (f (i ()), list_apply (l1 (), l2 ()));

sus fun (Int ()) main () =
    force let
        () :: () = print (list_apply (make_list (3), make_list_2 (3)));
    in 0;