

module AbsHpl where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program a = ProgramB a [FunctionOrRefOrType a]
  deriving (Eq, Ord, Show, Read)

instance Functor Program where
    fmap f x = case x of
        ProgramB a functionorrefortypes -> ProgramB (f a) (map (fmap f) functionorrefortypes)
data FunctionOrRefOrType a
    = FunctionOrRefOrTypeF a (FunctionDef a)
    | FunctionOrRefOrTypeT a (AlgType a)
    | FunctionOrRefOrTypeR a (RefDef a)
  deriving (Eq, Ord, Show, Read)

instance Functor FunctionOrRefOrType where
    fmap f x = case x of
        FunctionOrRefOrTypeF a functiondef -> FunctionOrRefOrTypeF (f a) (fmap f functiondef)
        FunctionOrRefOrTypeT a algtype -> FunctionOrRefOrTypeT (f a) (fmap f algtype)
        FunctionOrRefOrTypeR a refdef -> FunctionOrRefOrTypeR (f a) (fmap f refdef)
data FunctionDef a
    = FunctionDefB a (Type a) Ident [FunctionArg a] (ValueStatement a)
    | SusFunctionDef a (Type a) Ident [FunctionArg a] (ValueStatement a)
  deriving (Eq, Ord, Show, Read)

instance Functor FunctionDef where
    fmap f x = case x of
        FunctionDefB a type_ ident functionargs valuestatement -> FunctionDefB (f a) (fmap f type_) ident (map (fmap f) functionargs) (fmap f valuestatement)
        SusFunctionDef a type_ ident functionargs valuestatement -> SusFunctionDef (f a) (fmap f type_) ident (map (fmap f) functionargs) (fmap f valuestatement)
data FunctionArg a = FunctionArgB a (PatternMatch a)
  deriving (Eq, Ord, Show, Read)

instance Functor FunctionArg where
    fmap f x = case x of
        FunctionArgB a patternmatch -> FunctionArgB (f a) (fmap f patternmatch)
data ValueStatement a
    = ValueStatementB a [Assignment a] (ValueStatement a)
    | ForceValueStatement a [Assignment a] (ValueStatement a)
    | IfValueStatement a (ValueStatement a) (ValueStatement a) (ValueStatement a)
    | LValueStatement a (ListValueStatementr a)
    | TValueStatement a (TupleValueStatementr a)
    | AValueStatement a (FunApplication a)
    | IValueStatement a Integer
    | LitStrValueStatement a String
    | FValueStatement a Ident (ValueStatement a)
    | Expr a (ValueStatement a) (ValueStatementExpr a)
  deriving (Eq, Ord, Show, Read)

instance Functor ValueStatement where
    fmap f x = case x of
        ValueStatementB a assignments valuestatement -> ValueStatementB (f a) (map (fmap f) assignments) (fmap f valuestatement)
        ForceValueStatement a assignments valuestatement -> ForceValueStatement (f a) (map (fmap f) assignments) (fmap f valuestatement)
        IfValueStatement a valuestatement1 valuestatement2 valuestatement3 -> IfValueStatement (f a) (fmap f valuestatement1) (fmap f valuestatement2) (fmap f valuestatement3)
        LValueStatement a listvaluestatementr -> LValueStatement (f a) (fmap f listvaluestatementr)
        TValueStatement a tuplevaluestatementr -> TValueStatement (f a) (fmap f tuplevaluestatementr)
        AValueStatement a funapplication -> AValueStatement (f a) (fmap f funapplication)
        IValueStatement a integer -> IValueStatement (f a) integer
        LitStrValueStatement a string -> LitStrValueStatement (f a) string
        FValueStatement a ident valuestatement -> FValueStatement (f a) ident (fmap f valuestatement)
        Expr a valuestatement valuestatementexpr -> Expr (f a) (fmap f valuestatement) (fmap f valuestatementexpr)
data RefDef a = RefDefB a (Type a) Ident (ValueStatement a)
  deriving (Eq, Ord, Show, Read)

instance Functor RefDef where
    fmap f x = case x of
        RefDefB a type_ ident valuestatement -> RefDefB (f a) (fmap f type_) ident (fmap f valuestatement)
data Type a
    = TypeB a Ident [Type a]
    | FunType a (Type a) (Type a)
    | TType a [Type a]
  deriving (Eq, Ord, Show, Read)

instance Functor Type where
    fmap f x = case x of
        TypeB a ident types -> TypeB (f a) ident (map (fmap f) types)
        FunType a type_1 type_2 -> FunType (f a) (fmap f type_1) (fmap f type_2)
        TType a types -> TType (f a) (map (fmap f) types)
data AlgType a = AlgTypeB a Ident [TypeArg a] [AlgTypeVal a]
  deriving (Eq, Ord, Show, Read)

instance Functor AlgType where
    fmap f x = case x of
        AlgTypeB a ident typeargs algtypevals -> AlgTypeB (f a) ident (map (fmap f) typeargs) (map (fmap f) algtypevals)
data TypeArg a = TypeArgB a Ident
  deriving (Eq, Ord, Show, Read)

instance Functor TypeArg where
    fmap f x = case x of
        TypeArgB a ident -> TypeArgB (f a) ident
data AlgTypeVal a = AlgTypeValB a Ident (Type a)
  deriving (Eq, Ord, Show, Read)

instance Functor AlgTypeVal where
    fmap f x = case x of
        AlgTypeValB a ident type_ -> AlgTypeValB (f a) ident (fmap f type_)
data PatternMatch a
    = PatternMatchI a Integer
    | PatternMatchB a Ident
    | TPatternMatch a [PatternMatch a]
    | CPatternMatch a (PatternMatch a) [PatternMatch a]
  deriving (Eq, Ord, Show, Read)

instance Functor PatternMatch where
    fmap f x = case x of
        PatternMatchI a integer -> PatternMatchI (f a) integer
        PatternMatchB a ident -> PatternMatchB (f a) ident
        TPatternMatch a patternmatchs -> TPatternMatch (f a) (map (fmap f) patternmatchs)
        CPatternMatch a patternmatch patternmatchs -> CPatternMatch (f a) (fmap f patternmatch) (map (fmap f) patternmatchs)
data Assignment a
    = AssignmentB a (Type a) (PatternMatch a) (ValueStatement a)
    | RefAssignment a (RefDef a)
  deriving (Eq, Ord, Show, Read)

instance Functor Assignment where
    fmap f x = case x of
        AssignmentB a type_ patternmatch valuestatement -> AssignmentB (f a) (fmap f type_) (fmap f patternmatch) (fmap f valuestatement)
        RefAssignment a refdef -> RefAssignment (f a) (fmap f refdef)
data FunApplication a
    = SFunApplication a Ident (FunApplication a)
    | FunApplicationB a Ident [FunctionArgAppl a]
  deriving (Eq, Ord, Show, Read)

instance Functor FunApplication where
    fmap f x = case x of
        SFunApplication a ident funapplication -> SFunApplication (f a) ident (fmap f funapplication)
        FunApplicationB a ident functionargappls -> FunApplicationB (f a) ident (map (fmap f) functionargappls)
data FunctionArgAppl a = FunctionArgApplB a (ValueStatement a)
  deriving (Eq, Ord, Show, Read)

instance Functor FunctionArgAppl where
    fmap f x = case x of
        FunctionArgApplB a valuestatement -> FunctionArgApplB (f a) (fmap f valuestatement)
data ListValueStatementr a
    = ListValueStatementB a [ValueStatement a]
  deriving (Eq, Ord, Show, Read)

instance Functor ListValueStatementr where
    fmap f x = case x of
        ListValueStatementB a valuestatements -> ListValueStatementB (f a) (map (fmap f) valuestatements)
data TupleValueStatementr a
    = TupleValueStatementB a [ValueStatement a]
  deriving (Eq, Ord, Show, Read)

instance Functor TupleValueStatementr where
    fmap f x = case x of
        TupleValueStatementB a valuestatements -> TupleValueStatementB (f a) (map (fmap f) valuestatements)
data ValueStatementExpr a
    = EAdd a (ValueStatement a)
    | ESub a (ValueStatement a)
    | EMod a (ValueStatement a)
    | EMul a (ValueStatement a)
    | EDiv a (ValueStatement a)
    | EL a (ValueStatement a)
    | ELQ a (ValueStatement a)
    | EG a (ValueStatement a)
    | EGQ a (ValueStatement a)
    | EEQ a (ValueStatement a)
    | ENE a (ValueStatement a)
  deriving (Eq, Ord, Show, Read)

instance Functor ValueStatementExpr where
    fmap f x = case x of
        EAdd a valuestatement -> EAdd (f a) (fmap f valuestatement)
        ESub a valuestatement -> ESub (f a) (fmap f valuestatement)
        EMod a valuestatement -> EMod (f a) (fmap f valuestatement)
        EMul a valuestatement -> EMul (f a) (fmap f valuestatement)
        EDiv a valuestatement -> EDiv (f a) (fmap f valuestatement)
        EL a valuestatement -> EL (f a) (fmap f valuestatement)
        ELQ a valuestatement -> ELQ (f a) (fmap f valuestatement)
        EG a valuestatement -> EG (f a) (fmap f valuestatement)
        EGQ a valuestatement -> EGQ (f a) (fmap f valuestatement)
        EEQ a valuestatement -> EEQ (f a) (fmap f valuestatement)
        ENE a valuestatement -> ENE (f a) (fmap f valuestatement)
