-- Haskell module generated by the BNF converter

module SkelHpl where

import qualified AbsHpl

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsHpl.Ident -> Result
transIdent x = case x of
  AbsHpl.Ident string -> failure x
transProgram :: Show a => AbsHpl.Program a -> Result
transProgram x = case x of
  AbsHpl.ProgramB _ functionorrefortypes -> failure x
transFunctionOrRefOrType :: Show a => AbsHpl.FunctionOrRefOrType a -> Result
transFunctionOrRefOrType x = case x of
  AbsHpl.FunctionOrRefOrTypeF _ functiondef -> failure x
  AbsHpl.FunctionOrRefOrTypeT _ algtype -> failure x
  AbsHpl.FunctionOrRefOrTypeR _ refdef -> failure x
transFunctionDef :: Show a => AbsHpl.FunctionDef a -> Result
transFunctionDef x = case x of
  AbsHpl.FunctionDefB _ type_ ident functionargs valuestatement -> failure x
  AbsHpl.SusFunctionDef _ type_ ident functionargs valuestatement -> failure x
transFunctionArg :: Show a => AbsHpl.FunctionArg a -> Result
transFunctionArg x = case x of
  AbsHpl.FunctionArgB _ patternmatch -> failure x
transValueStatement :: Show a => AbsHpl.ValueStatement a -> Result
transValueStatement x = case x of
  AbsHpl.ValueStatementB _ assignments valuestatement -> failure x
  AbsHpl.ForceValueStatement _ assignments valuestatement -> failure x
  AbsHpl.IfValueStatement _ valuestatement1 valuestatement2 valuestatement3 -> failure x
  AbsHpl.LValueStatement _ listvaluestatementr -> failure x
  AbsHpl.TValueStatement _ tuplevaluestatementr -> failure x
  AbsHpl.AValueStatement _ funapplication -> failure x
  AbsHpl.IValueStatement _ integer -> failure x
  AbsHpl.LitStrValueStatement _ string -> failure x
  AbsHpl.FValueStatement _ ident valuestatement -> failure x
  AbsHpl.Expr _ valuestatement valuestatementexpr -> failure x
transRefDef :: Show a => AbsHpl.RefDef a -> Result
transRefDef x = case x of
  AbsHpl.RefDefB _ type_ ident valuestatement -> failure x
transType :: Show a => AbsHpl.Type a -> Result
transType x = case x of
  AbsHpl.TypeB _ ident types -> failure x
  AbsHpl.FunType _ type_1 type_2 -> failure x
  AbsHpl.TType _ types -> failure x
transAlgType :: Show a => AbsHpl.AlgType a -> Result
transAlgType x = case x of
  AbsHpl.AlgTypeB _ ident typeargs algtypevals -> failure x
transTypeArg :: Show a => AbsHpl.TypeArg a -> Result
transTypeArg x = case x of
  AbsHpl.TypeArgB _ ident -> failure x
transAlgTypeVal :: Show a => AbsHpl.AlgTypeVal a -> Result
transAlgTypeVal x = case x of
  AbsHpl.AlgTypeValB _ ident type_ -> failure x
transPatternMatch :: Show a => AbsHpl.PatternMatch a -> Result
transPatternMatch x = case x of
  AbsHpl.PatternMatchI _ integer -> failure x
  AbsHpl.PatternMatchB _ ident -> failure x
  AbsHpl.TPatternMatch _ patternmatchs -> failure x
  AbsHpl.CPatternMatch _ patternmatch patternmatchs -> failure x
transAssignment :: Show a => AbsHpl.Assignment a -> Result
transAssignment x = case x of
  AbsHpl.AssignmentB _ type_ patternmatch valuestatement -> failure x
  AbsHpl.RefAssignment _ refdef -> failure x
transFunApplication :: Show a => AbsHpl.FunApplication a -> Result
transFunApplication x = case x of
  AbsHpl.SFunApplication _ ident funapplication -> failure x
  AbsHpl.FunApplicationB _ ident functionargappls -> failure x
transFunctionArgAppl :: Show a => AbsHpl.FunctionArgAppl a -> Result
transFunctionArgAppl x = case x of
  AbsHpl.FunctionArgApplB _ valuestatement -> failure x
transListValueStatementr :: Show a => AbsHpl.ListValueStatementr a -> Result
transListValueStatementr x = case x of
  AbsHpl.ListValueStatementB _ valuestatements -> failure x
transTupleValueStatementr :: Show a => AbsHpl.TupleValueStatementr a -> Result
transTupleValueStatementr x = case x of
  AbsHpl.TupleValueStatementB _ valuestatements -> failure x
transValueStatementExpr :: Show a => AbsHpl.ValueStatementExpr a -> Result
transValueStatementExpr x = case x of
  AbsHpl.EAdd _ valuestatement -> failure x
  AbsHpl.ESub _ valuestatement -> failure x
  AbsHpl.EMod _ valuestatement -> failure x
  AbsHpl.EMul _ valuestatement -> failure x
  AbsHpl.EDiv _ valuestatement -> failure x
  AbsHpl.EL _ valuestatement -> failure x
  AbsHpl.ELQ _ valuestatement -> failure x
  AbsHpl.EG _ valuestatement -> failure x
  AbsHpl.EGQ _ valuestatement -> failure x
  AbsHpl.EEQ _ valuestatement -> failure x
  AbsHpl.ENE _ valuestatement -> failure x

