{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintHpl.
--   Generated by the BNF converter.

module PrintHpl where

import qualified AbsHpl
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsHpl.Ident where
  prt _ (AbsHpl.Ident i) = doc $ showString $ i

instance Print (AbsHpl.Program a) where
  prt i e = case e of
    AbsHpl.ProgramB _ functionorrefortypes -> prPrec i 0 (concatD [prt 0 functionorrefortypes])

instance Print (AbsHpl.FunctionOrRefOrType a) where
  prt i e = case e of
    AbsHpl.FunctionOrRefOrTypeF _ functiondef -> prPrec i 0 (concatD [prt 0 functiondef])
    AbsHpl.FunctionOrRefOrTypeT _ algtype -> prPrec i 0 (concatD [prt 0 algtype])
    AbsHpl.FunctionOrRefOrTypeR _ refdef -> prPrec i 0 (concatD [prt 0 refdef])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsHpl.FunctionOrRefOrType a] where
  prt = prtList

instance Print (AbsHpl.FunctionDef a) where
  prt i e = case e of
    AbsHpl.FunctionDefB _ type_ id functionargs valuestatement -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 type_, prt 0 id, doc (showString "("), prt 0 functionargs, doc (showString ")"), doc (showString "="), prt 0 valuestatement, doc (showString ";")])
    AbsHpl.SusFunctionDef _ type_ id functionargs valuestatement -> prPrec i 0 (concatD [doc (showString "sus"), doc (showString "fun"), prt 0 type_, prt 0 id, doc (showString "("), prt 0 functionargs, doc (showString ")"), doc (showString "="), prt 0 valuestatement, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsHpl.FunctionArg a) where
  prt i e = case e of
    AbsHpl.FunctionArgB _ patternmatch -> prPrec i 0 (concatD [prt 0 patternmatch])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsHpl.FunctionArg a] where
  prt = prtList

instance Print [AbsHpl.FunctionDef a] where
  prt = prtList

instance Print (AbsHpl.ValueStatement a) where
  prt i e = case e of
    AbsHpl.ValueStatementB _ assignments valuestatement -> prPrec i 0 (concatD [doc (showString "let"), prt 0 assignments, doc (showString "in"), prt 0 valuestatement])
    AbsHpl.ForceValueStatement _ assignments valuestatement -> prPrec i 0 (concatD [doc (showString "force"), doc (showString "let"), prt 0 assignments, doc (showString "in"), prt 0 valuestatement])
    AbsHpl.IfValueStatement _ valuestatement1 valuestatement2 valuestatement3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 valuestatement1, doc (showString "then"), prt 0 valuestatement2, doc (showString "else"), prt 0 valuestatement3])
    AbsHpl.LValueStatement _ listvaluestatementr -> prPrec i 0 (concatD [prt 0 listvaluestatementr])
    AbsHpl.TValueStatement _ tuplevaluestatementr -> prPrec i 0 (concatD [prt 0 tuplevaluestatementr])
    AbsHpl.AValueStatement _ funapplication -> prPrec i 0 (concatD [prt 0 funapplication])
    AbsHpl.IValueStatement _ n -> prPrec i 0 (concatD [prt 0 n])
    AbsHpl.LitStrValueStatement _ str -> prPrec i 0 (concatD [prt 0 str])
    AbsHpl.FValueStatement _ id valuestatement -> prPrec i 0 (concatD [doc (showString "{"), prt 0 id, doc (showString "->"), prt 0 valuestatement, doc (showString "}")])
    AbsHpl.Expr _ valuestatement valuestatementexpr -> prPrec i 0 (concatD [prt 0 valuestatement, prt 0 valuestatementexpr])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsHpl.ValueStatement a] where
  prt = prtList

instance Print (AbsHpl.RefDef a) where
  prt i e = case e of
    AbsHpl.RefDefB _ type_ id valuestatement -> prPrec i 0 (concatD [doc (showString "ref"), prt 0 type_, prt 0 id, doc (showString "="), prt 0 valuestatement, doc (showString ";")])

instance Print (AbsHpl.Type a) where
  prt i e = case e of
    AbsHpl.TypeB _ id types -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 types, doc (showString ")")])
    AbsHpl.FunType _ type_1 type_2 -> prPrec i 0 (concatD [doc (showString "("), prt 0 type_1, doc (showString "->"), prt 0 type_2, doc (showString ")")])
    AbsHpl.TType _ types -> prPrec i 0 (concatD [doc (showString "("), prt 0 types, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsHpl.Type a] where
  prt = prtList

instance Print (AbsHpl.AlgType a) where
  prt i e = case e of
    AbsHpl.AlgTypeB _ id typeargs algtypevals -> prPrec i 0 (concatD [doc (showString "data"), prt 0 id, doc (showString "("), prt 0 typeargs, doc (showString ")"), doc (showString "="), prt 0 algtypevals, doc (showString ";")])

instance Print (AbsHpl.TypeArg a) where
  prt i e = case e of
    AbsHpl.TypeArgB _ id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsHpl.TypeArg a] where
  prt = prtList

instance Print (AbsHpl.AlgTypeVal a) where
  prt i e = case e of
    AbsHpl.AlgTypeValB _ id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 type_, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print [AbsHpl.AlgTypeVal a] where
  prt = prtList

instance Print (AbsHpl.PatternMatch a) where
  prt i e = case e of
    AbsHpl.PatternMatchI _ n -> prPrec i 0 (concatD [prt 0 n])
    AbsHpl.PatternMatchB _ id -> prPrec i 0 (concatD [prt 0 id])
    AbsHpl.TPatternMatch _ patternmatchs -> prPrec i 0 (concatD [doc (showString "("), prt 0 patternmatchs, doc (showString ")")])
    AbsHpl.CPatternMatch _ patternmatch patternmatchs -> prPrec i 0 (concatD [prt 0 patternmatch, doc (showString "("), prt 0 patternmatchs, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsHpl.PatternMatch a] where
  prt = prtList

instance Print (AbsHpl.Assignment a) where
  prt i e = case e of
    AbsHpl.AssignmentB _ type_ patternmatch valuestatement -> prPrec i 0 (concatD [prt 0 type_, doc (showString "::"), prt 0 patternmatch, doc (showString "="), prt 0 valuestatement, doc (showString ";")])
    AbsHpl.RefAssignment _ refdef -> prPrec i 0 (concatD [prt 0 refdef])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsHpl.Assignment a] where
  prt = prtList

instance Print (AbsHpl.FunApplication a) where
  prt i e = case e of
    AbsHpl.SFunApplication _ id funapplication -> prPrec i 0 (concatD [prt 0 id, doc (showString "."), prt 0 funapplication])
    AbsHpl.FunApplicationB _ id functionargappls -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 functionargappls, doc (showString ")")])

instance Print (AbsHpl.FunctionArgAppl a) where
  prt i e = case e of
    AbsHpl.FunctionArgApplB _ valuestatement -> prPrec i 0 (concatD [prt 0 valuestatement])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsHpl.FunctionArgAppl a] where
  prt = prtList

instance Print (AbsHpl.ListValueStatementr a) where
  prt i e = case e of
    AbsHpl.ListValueStatementB _ valuestatements -> prPrec i 0 (concatD [doc (showString "["), prt 0 valuestatements, doc (showString "]")])

instance Print (AbsHpl.TupleValueStatementr a) where
  prt i e = case e of
    AbsHpl.TupleValueStatementB _ valuestatements -> prPrec i 0 (concatD [doc (showString "("), prt 0 valuestatements, doc (showString ")")])

instance Print (AbsHpl.ValueStatementExpr a) where
  prt i e = case e of
    AbsHpl.EAdd _ valuestatement -> prPrec i 0 (concatD [doc (showString "+"), prt 0 valuestatement])
    AbsHpl.ESub _ valuestatement -> prPrec i 0 (concatD [doc (showString "-"), prt 0 valuestatement])
    AbsHpl.EMod _ valuestatement -> prPrec i 0 (concatD [doc (showString "%"), prt 0 valuestatement])
    AbsHpl.EMul _ valuestatement -> prPrec i 0 (concatD [doc (showString "*"), prt 0 valuestatement])
    AbsHpl.EDiv _ valuestatement -> prPrec i 0 (concatD [doc (showString "/"), prt 0 valuestatement])
    AbsHpl.EL _ valuestatement -> prPrec i 0 (concatD [doc (showString "<"), prt 0 valuestatement])
    AbsHpl.ELQ _ valuestatement -> prPrec i 0 (concatD [doc (showString "<="), prt 0 valuestatement])
    AbsHpl.EG _ valuestatement -> prPrec i 0 (concatD [doc (showString ">"), prt 0 valuestatement])
    AbsHpl.EGQ _ valuestatement -> prPrec i 0 (concatD [doc (showString ">="), prt 0 valuestatement])
    AbsHpl.EEQ _ valuestatement -> prPrec i 0 (concatD [doc (showString "=="), prt 0 valuestatement])
    AbsHpl.ENE _ valuestatement -> prPrec i 0 (concatD [doc (showString "!="), prt 0 valuestatement])

